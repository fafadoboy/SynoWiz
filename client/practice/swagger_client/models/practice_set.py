# coding: utf-8

"""
    Practice Service

    API for managing practice sets and their executions

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class PracticeSet(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, set_name=None, word_ids=None):
        """
        PracticeSet - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'set_name': 'str',
            'word_ids': 'list[str]',
            'created_at': 'datetime',
            'updated_at': 'datetime'
        }

        self.attribute_map = {
            'id': 'id',
            'set_name': 'set_name',
            'word_ids': 'word_ids',
            'created_at': 'created_at',
            'updated_at': 'updated_at'
        }

        self._id = None
        self._created_at = None
        self._updated_at = None
        self._set_name = set_name
        self._word_ids = word_ids

    @property
    def id(self):
        """
        Gets the id of this PracticeSet.
        Unique identifier for the practice set

        :return: The id of this PracticeSet.
        :rtype: str
        """
        return self._id

    @property
    def set_name(self):
        """
        Gets the set_name of this PracticeSet.
        Name of the practice set

        :return: The set_name of this PracticeSet.
        :rtype: str
        """
        return self._set_name

    @set_name.setter
    def set_name(self, set_name):
        """
        Sets the set_name of this PracticeSet.
        Name of the practice set

        :param set_name: The set_name of this PracticeSet.
        :type: str
        """

        self._set_name = set_name

    @property
    def word_ids(self):
        """
        Gets the word_ids of this PracticeSet.
        List of word IDs included in the practice set

        :return: The word_ids of this PracticeSet.
        :rtype: list[str]
        """
        return self._word_ids

    @word_ids.setter
    def word_ids(self, word_ids):
        """
        Sets the word_ids of this PracticeSet.
        List of word IDs included in the practice set

        :param word_ids: The word_ids of this PracticeSet.
        :type: list[str]
        """

        self._word_ids = word_ids

    @property
    def created_at(self):
        """
        Gets the created_at of this PracticeSet.
        Timestamp when the practice set was created

        :return: The created_at of this PracticeSet.
        :rtype: datetime
        """
        return self._created_at

    @property
    def updated_at(self):
        """
        Gets the updated_at of this PracticeSet.
        Timestamp of the last update to the set

        :return: The updated_at of this PracticeSet.
        :rtype: datetime
        """
        return self._updated_at

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
