# coding: utf-8

"""
    Practice Service

    API for managing practice sets and their executions

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class PracticeExecution(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, practice_set_id=None, date=None, score=None, retries=None):
        """
        PracticeExecution - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'practice_set_id': 'str',
            'date': 'datetime',
            'score': 'int',
            'retries': 'int',
            'created_at': 'datetime'
        }

        self.attribute_map = {
            'id': 'id',
            'practice_set_id': 'practice_set_id',
            'date': 'date',
            'score': 'score',
            'retries': 'retries',
            'created_at': 'created_at'
        }

        self._id = None
        self._created_at = None
        self._practice_set_id = practice_set_id
        self._date = date
        self._score = score
        self._retries = retries

    @property
    def id(self):
        """
        Gets the id of this PracticeExecution.
        Unique identifier for the practice execution

        :return: The id of this PracticeExecution.
        :rtype: str
        """
        return self._id

    @property
    def practice_set_id(self):
        """
        Gets the practice_set_id of this PracticeExecution.
        Identifier of the practice set this execution is associated with

        :return: The practice_set_id of this PracticeExecution.
        :rtype: str
        """
        return self._practice_set_id

    @practice_set_id.setter
    def practice_set_id(self, practice_set_id):
        """
        Sets the practice_set_id of this PracticeExecution.
        Identifier of the practice set this execution is associated with

        :param practice_set_id: The practice_set_id of this PracticeExecution.
        :type: str
        """

        self._practice_set_id = practice_set_id

    @property
    def date(self):
        """
        Gets the date of this PracticeExecution.
        Timestamp when the practice execution occurred

        :return: The date of this PracticeExecution.
        :rtype: datetime
        """
        return self._date

    @date.setter
    def date(self, date):
        """
        Sets the date of this PracticeExecution.
        Timestamp when the practice execution occurred

        :param date: The date of this PracticeExecution.
        :type: datetime
        """

        self._date = date

    @property
    def score(self):
        """
        Gets the score of this PracticeExecution.
        Score achieved in the practice execution

        :return: The score of this PracticeExecution.
        :rtype: int
        """
        return self._score

    @score.setter
    def score(self, score):
        """
        Sets the score of this PracticeExecution.
        Score achieved in the practice execution

        :param score: The score of this PracticeExecution.
        :type: int
        """

        self._score = score

    @property
    def retries(self):
        """
        Gets the retries of this PracticeExecution.
        Number of retries in the practice execution

        :return: The retries of this PracticeExecution.
        :rtype: int
        """
        return self._retries

    @retries.setter
    def retries(self, retries):
        """
        Sets the retries of this PracticeExecution.
        Number of retries in the practice execution

        :param retries: The retries of this PracticeExecution.
        :type: int
        """

        self._retries = retries

    @property
    def created_at(self):
        """
        Gets the created_at of this PracticeExecution.
        Timestamp when the execution record was created

        :return: The created_at of this PracticeExecution.
        :rtype: datetime
        """
        return self._created_at

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
