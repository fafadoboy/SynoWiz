# coding: utf-8

"""
    Lexico Service

    API for managing words in the lexico service

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class DefaultApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def words_get(self, **kwargs):
        """
        List all words
        Retrieve a paginated list of all words

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.words_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int page: Page number of the word list
        :param int page_size: Number of words per page
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.words_get_with_http_info(**kwargs)
        else:
            (data) = self.words_get_with_http_info(**kwargs)
            return data

    def words_get_with_http_info(self, **kwargs):
        """
        List all words
        Retrieve a paginated list of all words

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.words_get_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int page: Page number of the word list
        :param int page_size: Number of words per page
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page', 'page_size']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method words_get" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/words'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'page' in params:
            query_params['page'] = params['page']
        if 'page_size' in params:
            query_params['pageSize'] = params['page_size']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='InlineResponse200',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def words_post(self, word, **kwargs):
        """
        Create a new word
        Add a new word to the lexico

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.words_post(word, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Word word: Word to add (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.words_post_with_http_info(word, **kwargs)
        else:
            (data) = self.words_post_with_http_info(word, **kwargs)
            return data

    def words_post_with_http_info(self, word, **kwargs):
        """
        Create a new word
        Add a new word to the lexico

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.words_post_with_http_info(word, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Word word: Word to add (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['word']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method words_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'word' is set
        if ('word' not in params) or (params['word'] is None):
            raise ValueError("Missing the required parameter `word` when calling `words_post`")

        resource_path = '/words'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'word' in params:
            body_params = params['word']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def words_word_id_get(self, word_id, **kwargs):
        """
        Get a word by ID
        Retrieve a word by its unique ID

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.words_word_id_get(word_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str word_id: Unique ID of the word (required)
        :return: Word
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.words_word_id_get_with_http_info(word_id, **kwargs)
        else:
            (data) = self.words_word_id_get_with_http_info(word_id, **kwargs)
            return data

    def words_word_id_get_with_http_info(self, word_id, **kwargs):
        """
        Get a word by ID
        Retrieve a word by its unique ID

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.words_word_id_get_with_http_info(word_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str word_id: Unique ID of the word (required)
        :return: Word
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['word_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method words_word_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'word_id' is set
        if ('word_id' not in params) or (params['word_id'] is None):
            raise ValueError("Missing the required parameter `word_id` when calling `words_word_id_get`")

        resource_path = '/words/{wordID}'.replace('{format}', 'json')
        path_params = {}
        if 'word_id' in params:
            path_params['wordID'] = params['word_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Word',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def words_word_id_patch(self, word_id, word_update, **kwargs):
        """
        Update a word by ID
        Update the details of a word by its unique ID

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.words_word_id_patch(word_id, word_update, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str word_id: Unique ID of the word to update (required)
        :param WordUpdate word_update: Word attributes to update (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.words_word_id_patch_with_http_info(word_id, word_update, **kwargs)
        else:
            (data) = self.words_word_id_patch_with_http_info(word_id, word_update, **kwargs)
            return data

    def words_word_id_patch_with_http_info(self, word_id, word_update, **kwargs):
        """
        Update a word by ID
        Update the details of a word by its unique ID

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.words_word_id_patch_with_http_info(word_id, word_update, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str word_id: Unique ID of the word to update (required)
        :param WordUpdate word_update: Word attributes to update (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['word_id', 'word_update']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method words_word_id_patch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'word_id' is set
        if ('word_id' not in params) or (params['word_id'] is None):
            raise ValueError("Missing the required parameter `word_id` when calling `words_word_id_patch`")
        # verify the required parameter 'word_update' is set
        if ('word_update' not in params) or (params['word_update'] is None):
            raise ValueError("Missing the required parameter `word_update` when calling `words_word_id_patch`")

        resource_path = '/words/{wordID}'.replace('{format}', 'json')
        path_params = {}
        if 'word_id' in params:
            path_params['wordID'] = params['word_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'word_update' in params:
            body_params = params['word_update']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PATCH',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))
